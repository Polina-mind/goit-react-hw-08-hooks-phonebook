{"version":3,"sources":["components/Form/Form.js","redux/operations.js","redux/selectors.js","components/Contacts/Contacts.js","components/Filter/Filter.js","views/ContactsView.js"],"names":["Form","state","name","number","handleChange","event","target","value","setState","handleSubmit","preventDefault","props","onSubmit","alert","this","type","className","onChange","pattern","title","required","Component","connect","dispatch","contact","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","message","addContact","getLoading","contacts","loading","getFilter","filter","getVisibleContacts","items","getAllContacts","normalizedFilter","toLowerCase","includes","onDelete","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","map","onClick","changeFilter","ContactsView","fetchContacts","isLoadingContacts","fetchContactRequest","get","fetchContactSuccess","fetchContactError"],"mappings":"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","file":"static/js/ContactsView.10e929df.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { addContact } from '../../redux/operations';\r\nimport './Form.css';\r\n\r\nclass Form extends Component {\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (this.state.name !== '' && this.state.number !== '') {\r\n      this.props.onSubmit(this.state);\r\n      this.setState({ name: '', number: '' });\r\n      return;\r\n    }\r\n\r\n    alert('Нет имени или номера для сохранения контакта!');\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form type=\"submit\" onSubmit={this.handleSubmit} className=\"Form\">\r\n        <label className=\"Label\">\r\n          Имя\r\n          <input\r\n            className=\"Input\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            // placeholder=\"Polina\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label className=\"Label\">\r\n          Номер\r\n          <input\r\n            className=\"Input\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            // placeholder=\"000-00-00\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className=\"Button\">\r\n          Добавить\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Form);\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './actions';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch(error => dispatch(fetchContactError(error.message)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contact = { ...name, ...number };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error.message)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest(id));\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error.message)));\r\n};\r\n\r\n//асинхронный вариант\r\n// const fetchContacts = () => async dispatch => {\r\n//   dispatch(fetchContactRequest());\r\n\r\n//   try {\r\n//     const { data } = await axios.get(\r\n//       '/contacts',\r\n//     );\r\n\r\n//     dispatch(fetchContactSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(fetchContactError(error.message));\r\n//   }\r\n// };\r\n\r\n// const addContact = (name, number) => async dispatch => {\r\n//   const contact = {\r\n//     name,\r\n//     number,\r\n//   };\r\n\r\n//   dispatch(addContactRequest());\r\n//   try {\r\n//     const { data } = await axios.post(\r\n//       '/contacts',\r\n//       contact,\r\n//     );\r\n//     dispatch(addContactSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(addContactError(error.message));\r\n//   }\r\n// };\r\n\r\n// const deleteContact = id => async dispatch => {\r\n//   dispatch(deleteContactRequest(id));\r\n//   try {\r\n//     await axios.delete(\r\n//       `/contacts/${id}`,\r\n//     );\r\n//     dispatch(deleteContactSuccess(id));\r\n//   } catch (error) {\r\n//     dispatch(deleteContactError(error.message));\r\n//   }\r\n// };\r\n\r\nexport { addContact, deleteContact, fetchContacts };\r\n","const getLoading = state => state.contacts.loading;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getVisibleContacts = state => {\r\n  const contacts = getAllContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    `${name}`.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nexport { getLoading, getFilter, getVisibleContacts };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { deleteContact } from '../../redux/operations';\r\nimport './Contacts.css';\r\nimport { getVisibleContacts } from '../../redux/selectors';\r\n\r\nconst Contacts = ({ contacts, onDelete }) => {\r\n  return (\r\n    <section className=\"Contacts\">\r\n      <ul className=\"ContactsList\">\r\n        {contacts.map(({ id, name, number }) => (\r\n          <li className=\"Item\" key={id}>\r\n            <span className=\"Name\">{name}:</span>\r\n            <span className=\"Number\">{number}</span>\r\n            <button\r\n              className=\"ButtonDelete\"\r\n              type=\"submit\"\r\n              onClick={() => onDelete(id)}\r\n              id={id}\r\n            >\r\n              Удалить\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nContacts.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return allContacts.filter(({ name }) =>\r\n//     `${name}`.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//   contacts: getVisibleContacts(items, filter),\r\n// });\r\n\r\n//с использованием селектора\r\nconst mapStateToProps = state => ({\r\n  contacts: getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDelete: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { changeFilter } from '../../redux/actions';\r\nimport './Filter.css';\r\nimport { getFilter } from '../../redux/selectors';\r\n\r\nconst Filter = ({ filter, handleChange }) => {\r\n  return (\r\n    <div>\r\n      <p className=\"FindTitle\">Поиск по имени</p>\r\n\r\n      <input\r\n        className=\"InputFilter\"\r\n        value={filter}\r\n        onChange={handleChange}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n};\r\n\r\n// const mapStateToProps = state => ({\r\n//   filter: state.contacts.filter,\r\n// });\r\n\r\n//с использованием селектора\r\nconst mapStateToProps = state => ({\r\n  filter: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  handleChange: event => dispatch(changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Form from '../components/Form';\r\nimport Contacts from '../components/Contacts';\r\nimport Filter from '../components/Filter';\r\nimport { fetchContacts } from '../redux/operations';\r\nimport { getLoading } from '../redux/selectors';\r\n\r\nclass ContactsView extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h2 className=\"Title\">Добавить контакт</h2>\r\n        <Form></Form>\r\n\r\n        <h2 className=\"Title\">Список контактов</h2>\r\n        <Filter></Filter>\r\n\r\n        {this.props.isLoadingContacts && <h1>Loading...</h1>}\r\n        <Contacts></Contacts>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// const mapStateToProps = ({ contacts: { loading } }) => ({\r\n//   isLoadingContacts: loading,\r\n// });\r\n\r\n//с использованием селектора\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\r\n"],"sourceRoot":""}